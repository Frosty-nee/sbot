#!/usr/bin/env python3

import _thread
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import traceback
import urllib.parse

import discord

import config
import commands

client = discord.Client()

channel = raylu = None

@client.event
def on_ready():
	global channel, raylu
	print('Logged in as', client.user.name, client.user.id)
	channel = client.get_channel('156656432874389504') # PyBuddies#github
	raylu = client.get_channel('160454259375079424')

@client.event
def on_message(message):
	text = message.content
	if text.startswith('!'):
		split = text.split(' ', 1)
		command = split[0][1:]
		handler = commands.handlers.get(command)
		if handler:
			args = None
			if len(split) > 1:
				args = split[1]
			try:
				handler(client, message, args)
			except:
				client.send_message(raylu, '```\n%s\n```' % traceback.format_exc())

class GitHubHandler(BaseHTTPRequestHandler):
	def do_POST(self):
		clength = int(self.headers['Content-Length'])
		content = self.rfile.read(clength).decode('utf-8')
		github_event = self.headers.get('X-GitHub-Event')
		if github_event:
			data = json.loads(content)
		else: # travisci
			params = urllib.parse.parse_qs(content, strict_parsing=True)
			data = json.loads(params['payload'][0])

		if github_event == 'push':
			message = []
			branch = data['ref']
			if branch.startswith('refs/heads/'):
				branch = branch[len('refs/heads/'):]
			message.append('%s pushed to `%s`: %s' % (data['pusher']['name'], branch, data['compare']))
			for commit in data['commits']:
				if commit['distinct']:
					message.append('`%s` (%s): %s' % (commit['id'][:7], commit['author']['name'], commit['message']))
			client.send_message(channel, '\n'.join(message))
		elif not github_event: # travisci
			status = data.get('status_message') or data['result_message']
			# data['type'] is 'push' or 'pull_request'
			client.send_message(channel, '%s build for %s on `%s` by %s: %s' % (
					status, data['type'], data['branch'], data['author_name'], data['build_url']))

		self.send_response(200)
		self.send_header('Content-Length', '0')
		self.end_headers()

httpd = HTTPServer(('', 8009), GitHubHandler)
_thread.start_new_thread(httpd.serve_forever, ())

client.login(config.email, config.password)
client.run()
